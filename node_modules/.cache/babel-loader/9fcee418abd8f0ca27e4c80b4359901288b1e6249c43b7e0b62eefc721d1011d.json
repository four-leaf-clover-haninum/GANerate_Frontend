{"ast":null,"code":"import axios from 'axios';\nimport { LOGIN_USER, REGISTER_USER, LOGIN_USER_FAILURE } from './types';\nexport function loginUser(dataToSubmit) {\n  return async dispatch => {\n    try {\n      const response = await axios.post('/auth/signin', dataToSubmit);\n      const {\n        code,\n        data\n      } = response.data;\n      if (code === 0) {\n        // 로그인 성공 시\n        dispatch({\n          type: LOGIN_USER,\n          payload: data\n        });\n      } else if (code === 2201) {\n        // 존재하지 않는 아이디\n        dispatch({\n          type: LOGIN_USER_FAILURE,\n          payload: {\n            message: '존재하지 않는 아이디'\n          }\n        });\n      } else if (code === 2202) {\n        // 올바르지 않은 비밀번호\n        dispatch({\n          type: LOGIN_USER_FAILURE,\n          payload: {\n            message: '올바르지 않은 비밀번호'\n          }\n        });\n      } else if (code === -1) {\n        // 비밀번호 누락\n        dispatch({\n          type: LOGIN_USER_FAILURE,\n          payload: {\n            message: '비밀번호는 필수입니다.'\n          }\n        });\n      } else {\n        // 기타 로그인 실패\n        dispatch({\n          type: LOGIN_USER_FAILURE,\n          payload: {\n            message: '로그인 실패'\n          }\n        });\n      }\n    } catch (error) {\n      // 서버 오류 등 요청 실패 시\n      dispatch({\n        type: LOGIN_USER_FAILURE,\n        payload: {\n          message: '서버 오류: 로그인 실패'\n        }\n      });\n    }\n  };\n}\nexport function registerUser(dataToSubmit) {\n  const request = axios.post('/auth/signup', dataToSubmit).then(response => response.data);\n  return {\n    type: REGISTER_USER,\n    payload: request\n  };\n}\nexport function navbarUser(dataToSubmit) {\n  const request = axios.post('/', dataToSubmit).then(response => response.data);\n  return {\n    type: REGISTER_USER,\n    payload: request\n  };\n}","map":{"version":3,"names":["axios","LOGIN_USER","REGISTER_USER","LOGIN_USER_FAILURE","loginUser","dataToSubmit","dispatch","response","post","code","data","type","payload","message","error","registerUser","request","then","navbarUser"],"sources":["/Users/parkjeongmin/Desktop/GAN/client/src/_actions/user_action.js"],"sourcesContent":["import axios from 'axios';\nimport {\n    LOGIN_USER,\n    REGISTER_USER,\n    LOGIN_USER_FAILURE\n} from './types';\n\nexport function loginUser(dataToSubmit) {\n    return async (dispatch) => {\n        try {\n            const response = await axios.post('/auth/signin', dataToSubmit);\n            const { code, data } = response.data;\n\n            if (code === 0) {\n                // 로그인 성공 시\n                dispatch({\n                    type: LOGIN_USER,\n                    payload: data\n                });\n            } else if (code === 2201) {\n                // 존재하지 않는 아이디\n                dispatch({\n                    type: LOGIN_USER_FAILURE,\n                    payload: { message: '존재하지 않는 아이디' }\n                });\n            } else if (code === 2202) {\n                // 올바르지 않은 비밀번호\n                dispatch({\n                    type: LOGIN_USER_FAILURE,\n                    payload: { message: '올바르지 않은 비밀번호' }\n                });\n            } else if (code === -1) {\n                // 비밀번호 누락\n                dispatch({\n                    type: LOGIN_USER_FAILURE,\n                    payload: { message: '비밀번호는 필수입니다.' }\n                });\n            } else {\n                // 기타 로그인 실패\n                dispatch({\n                    type: LOGIN_USER_FAILURE,\n                    payload: { message: '로그인 실패' }\n                });\n            }\n        } catch (error) {\n            // 서버 오류 등 요청 실패 시\n            dispatch({\n                type: LOGIN_USER_FAILURE,\n                payload: { message: '서버 오류: 로그인 실패' }\n            });\n        }\n    };\n}\n\n\nexport function registerUser(dataToSubmit) {\n    const request = axios.post('/auth/signup', dataToSubmit)\n        .then(response => response.data)\n\n    return {\n        type: REGISTER_USER,\n        payload: request\n    };\n}\n\nexport function navbarUser(dataToSubmit) {\n    const request = axios.post('/', dataToSubmit)\n        .then(response => response.data)\n\n    return {\n        type: REGISTER_USER,\n        payload: request\n    };\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACIC,UAAU,EACVC,aAAa,EACbC,kBAAkB,QACf,SAAS;AAEhB,OAAO,SAASC,SAASA,CAACC,YAAY,EAAE;EACpC,OAAO,MAAOC,QAAQ,IAAK;IACvB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,cAAc,EAAEH,YAAY,CAAC;MAC/D,MAAM;QAAEI,IAAI;QAAEC;MAAK,CAAC,GAAGH,QAAQ,CAACG,IAAI;MAEpC,IAAID,IAAI,KAAK,CAAC,EAAE;QACZ;QACAH,QAAQ,CAAC;UACLK,IAAI,EAAEV,UAAU;UAChBW,OAAO,EAAEF;QACb,CAAC,CAAC;MACN,CAAC,MAAM,IAAID,IAAI,KAAK,IAAI,EAAE;QACtB;QACAH,QAAQ,CAAC;UACLK,IAAI,EAAER,kBAAkB;UACxBS,OAAO,EAAE;YAAEC,OAAO,EAAE;UAAc;QACtC,CAAC,CAAC;MACN,CAAC,MAAM,IAAIJ,IAAI,KAAK,IAAI,EAAE;QACtB;QACAH,QAAQ,CAAC;UACLK,IAAI,EAAER,kBAAkB;UACxBS,OAAO,EAAE;YAAEC,OAAO,EAAE;UAAe;QACvC,CAAC,CAAC;MACN,CAAC,MAAM,IAAIJ,IAAI,KAAK,CAAC,CAAC,EAAE;QACpB;QACAH,QAAQ,CAAC;UACLK,IAAI,EAAER,kBAAkB;UACxBS,OAAO,EAAE;YAAEC,OAAO,EAAE;UAAe;QACvC,CAAC,CAAC;MACN,CAAC,MAAM;QACH;QACAP,QAAQ,CAAC;UACLK,IAAI,EAAER,kBAAkB;UACxBS,OAAO,EAAE;YAAEC,OAAO,EAAE;UAAS;QACjC,CAAC,CAAC;MACN;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ;MACAR,QAAQ,CAAC;QACLK,IAAI,EAAER,kBAAkB;QACxBS,OAAO,EAAE;UAAEC,OAAO,EAAE;QAAgB;MACxC,CAAC,CAAC;IACN;EACJ,CAAC;AACL;AAGA,OAAO,SAASE,YAAYA,CAACV,YAAY,EAAE;EACvC,MAAMW,OAAO,GAAGhB,KAAK,CAACQ,IAAI,CAAC,cAAc,EAAEH,YAAY,CAAC,CACnDY,IAAI,CAACV,QAAQ,IAAIA,QAAQ,CAACG,IAAI,CAAC;EAEpC,OAAO;IACHC,IAAI,EAAET,aAAa;IACnBU,OAAO,EAAEI;EACb,CAAC;AACL;AAEA,OAAO,SAASE,UAAUA,CAACb,YAAY,EAAE;EACrC,MAAMW,OAAO,GAAGhB,KAAK,CAACQ,IAAI,CAAC,GAAG,EAAEH,YAAY,CAAC,CACxCY,IAAI,CAACV,QAAQ,IAAIA,QAAQ,CAACG,IAAI,CAAC;EAEpC,OAAO;IACHC,IAAI,EAAET,aAAa;IACnBU,OAAO,EAAEI;EACb,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}